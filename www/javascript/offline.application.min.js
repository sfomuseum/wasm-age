var offline=offline||{};offline.application=function(){var e={init:function(e){return new Promise((t,n)=>{if(!1 in navigator){n("Service workers not available.");return}var o=e+"sw.js",s={scope:e};console.log("register service worker",o,s),navigator.serviceWorker.register(o,s).then(e=>{navigator.onLine&&(console.debug("update sw registration"),e.update().then(e=>{console.log("sw registration updated")}).catch(e=>{console.error("failed to update sw registration",e)})),console.log("sw registered",s),t()}).catch(e=>{console.error("Failed to register service worker",e),n(e)})})},purge_with_confirmation:function(t){return new Promise((n,s)=>{if(!confirm("Are you sure you want to delete all the application caches? This can not be undone.")){n();return}if(!navigator.onLine&&!confirm("Are you really sure? You appear to be offline and deleting the application cache will probably cause offline support to stop working until you are online again.")){n();return}e.purge(t).then(e=>{n(e)}).catch(e=>{s(e)})})},purge:function(e){return new Promise((t,n)=>{caches.keys().then(function(t){return console.debug("Delete "+document.defaultView.location.origin+" caches"),Promise.all(t.map(function(t){return t.startsWith(e)?caches.delete(t).then(function(){console.debug("Cache with name "+t+" is deleted")}):Promise.resolve()}))}).then(function(){console.debug("All "+document.defaultView.location.origin+" caches are deleted"),t()}).catch(e=>{console.error("Failed to remove caches, ",e),n(e)})})}};return e}()